include "buzz_includes/buzz_utils/vec2.bzz"
include "buzz_includes/buzz_utils/string.bzz"
include "config/search_example/parameters.bzz"
include "buzz_includes/search_example/global_variables.bzz"
include "buzz_includes/debug.bzz"

var virtual_stigmergy

# Executed at init time
function init() {
  # Take off command for the Spiri drone model
  takeoff()

  # Show trajectory for debugging
  show_colored_trajectory(NUMBER_OF_ROBOTS)

  # Set first search position
  next_position.x = uniform(SEARCH_SPACE.minx, SEARCH_SPACE.maxx)
  next_position.y = uniform(SEARCH_SPACE.miny, SEARCH_SPACE.maxy)
  goto(next_position.x, next_position.y)

  # Set initial state
  current_state = STATE_SEARCH

  # Set swarm and virtual stigmergy
  virtual_stigmergy = stigmergy.create(1)
  
  if ( id == 0 ) {
    virtual_stigmergy.put("found_target_info", found_target_info)
  }
  virtual_stigmergy.onconflict(function(k, l, r){
      return l
    })
  virtual_stigmergy.onconflictlost(function(k, l){})
}

# Check if a target is in sight
function has_discovered_target()
{ 
  return detect_targets()
}

# Continue random search
function random_search()
{ 
  next_position.x = uniform(math.max(next_position.x-SEARCH_SPEED, SEARCH_SPACE.minx), math.min(next_position.x+SEARCH_SPEED, SEARCH_SPACE.maxx))
  next_position.y = uniform(math.max(next_position.y-SEARCH_SPEED, SEARCH_SPACE.miny), math.min(next_position.y+SEARCH_SPEED, SEARCH_SPACE.maxy))
  goto(next_position.x, next_position.y)
}

# Executed every time step
function step() {
  # Update sensors
  update_gps_position()

  ### State machine ###  
  ## Searching for the target
  if (current_state == STATE_SEARCH){ 
    debug.print("Searching")
    # Look if a target is discovered
    if ( has_discovered_target() != 0 ) { 
      found_target_info.found_by = id
      found_target_info.x = gps_position.x
      found_target_info.y = gps_position.y
      virtual_stigmergy.put("found_target_info", found_target_info)
      goto(MEETING_POINT.x, MEETING_POINT.y)
      current_state = STATE_FOUND
      current_search_step = 0      
    } 
    # If the max number of search step is reached go back to meeting point
    else if ( current_search_step >= NUMBER_OF_SEARCH_STEP ){ 
      goto(MEETING_POINT.x, MEETING_POINT.y)
      current_state = STATE_MEETING
      current_search_step = 0
    }
    # Else continue searching
    else { 
      if ( has_reached(next_position.x, next_position.y, DELTA_REACHED_POS) != 0 )
      {
        random_search()
        current_search_step = current_search_step + 1
      }
    }

  }
  # The robot that found the target stays at the meeting point and broacast its info
  else if ( current_state == STATE_FOUND ){ 
    debug.print("Found the target")
  }
  # At some point the other robots go the meeting point and see if another robot found something
  else if ( current_state == STATE_MEETING ){ 
    debug.print("Periodic meeting")
    if ( has_reached(MEETING_POINT.x, MEETING_POINT.y, DELTA_REACHED_POS) == 0 ) {
      # Look for targets when comming back to meeting point
      if ( has_discovered_target() != 0 ) { 
        found_target_info.found_by = id
        found_target_info.x = gps_position.x
        found_target_info.y = gps_position.y
        virtual_stigmergy.put("found_target_info", found_target_info)
        goto(MEETING_POINT.x, MEETING_POINT.y)
        current_state = STATE_FOUND
        current_search_step = 0      
      } 
    }
    # If another robot found a target, go in relay position
    else {
      found_target_info = virtual_stigmergy.get("found_target_info")
      if (found_target_info.found_by != -1)
      {
        current_state = STATE_RELAY
      }
      # Else continue searching
      else
      {
        next_position.x = uniform(SEARCH_SPACE.minx, SEARCH_SPACE.maxx)
        next_position.y = uniform(SEARCH_SPACE.miny, SEARCH_SPACE.maxy)
        goto(next_position.x, next_position.y)
        current_state = STATE_SEARCH
      }
    }
  }
  else if ( current_state == STATE_RELAY )
  {
    relay_id = id
    if (relay_id < found_target_info.found_by){
      relay_id = relay_id + 1
    }
    relay_ratio = float(relay_id) / float(NUMBER_OF_ROBOTS-1)
    relay_x = (found_target_info.x - MEETING_POINT.x ) * relay_ratio + MEETING_POINT.x
    relay_y = (found_target_info.y - MEETING_POINT.y ) * relay_ratio + MEETING_POINT.y
    next_position.x = relay_x
    next_position.y = relay_y
    goto(next_position.x, next_position.y)
    if (math.abs(relay_ratio - 1) < 0.01)
    {
      debug.print("Follow target")
    }
    else
    {
      debug.print("Communication relay")
    }
  }
}
 
# Execute at exit
function destroy() {
}
